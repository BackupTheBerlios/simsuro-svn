GAS LISTING /tmp/ccIcdeiG.s 			page 1


   1               		.file	"asuro_avr_irrc5.c"
   2               		.arch atmega8
   3               	__SREG__ = 0x3f
   4               	__SP_H__ = 0x3e
   5               	__SP_L__ = 0x3d
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  10               		.stabs	"/home/denis/devel/simsuro/target/avr/",100,0,0,.Ltext0
  11               		.stabs	"asuro_avr_irrc5.c",100,0,0,.Ltext0
  12               		.text
  13               	.Ltext0:
  14               		.stabs	"gcc2_compiled.",60,0,0,0
  15               		.stabs	"int:t(0,1)=r(0,1);-32768;32767;",128,0,0,0
  16               		.stabs	"char:t(0,2)=@s8;r(0,2);0;255;",128,0,0,0
  17               		.stabs	"long int:t(0,3)=@s32;r(0,3);0020000000000;0017777777777;",128,0,0,0
  18               		.stabs	"unsigned int:t(0,4)=r(0,4);0000000000000;0000000177777;",128,0,0,0
  19               		.stabs	"long unsigned int:t(0,5)=@s32;r(0,5);0000000000000;0037777777777;",128,0,0,0
  20               		.stabs	"long long int:t(0,6)=@s64;r(0,6);01000000000000000000000;0777777777777777777777;",128,0,0,
  21               		.stabs	"long long unsigned int:t(0,7)=@s64;r(0,7);0000000000000;01777777777777777777777;",128,0,0,
  22               		.stabs	"short int:t(0,8)=r(0,8);-32768;32767;",128,0,0,0
  23               		.stabs	"short unsigned int:t(0,9)=r(0,9);0000000000000;0000000177777;",128,0,0,0
  24               		.stabs	"signed char:t(0,10)=@s8;r(0,10);-128;127;",128,0,0,0
  25               		.stabs	"unsigned char:t(0,11)=@s8;r(0,11);0;255;",128,0,0,0
  26               		.stabs	"float:t(0,12)=r(0,1);4;0;",128,0,0,0
  27               		.stabs	"double:t(0,13)=r(0,1);4;0;",128,0,0,0
  28               		.stabs	"long double:t(0,14)=r(0,1);4;0;",128,0,0,0
  29               		.stabs	"complex int:t(0,15)=s4real:(0,1),0,16;imag:(0,1),16,16;;",128,0,0,0
  30               		.stabs	"complex float:t(0,16)=R3;8;0;",128,0,0,0
  31               		.stabs	"complex double:t(0,17)=R3;8;0;",128,0,0,0
  32               		.stabs	"complex long double:t(0,18)=R3;8;0;",128,0,0,0
  33               		.stabs	"__builtin_va_list:t(0,19)=*(0,20)=(0,20)",128,0,0,0
  34               		.stabs	"_Bool:t(0,21)=@s8;-16;",128,0,0,0
  35               		.stabs	"asuro_avr_irrc5.c",130,0,0,0
  36               		.stabs	"../../include/asuro.h",130,0,0,0
  37               		.stabs	"asuro_avr.h",130,0,0,0
  38               		.stabs	"/usr/avr/include/avr/io.h",130,0,0,0
  39               		.stabs	"/usr/avr/include/avr/sfr_defs.h",130,0,0,0
  40               		.stabn	162,0,0,0
  41               		.stabs	"/usr/avr/include/avr/iom8.h",130,0,0,0
  42               		.stabn	162,0,0,0
  43               		.stabn	162,0,0,0
  44               		.stabs	"/usr/avr/include/avr/interrupt.h",130,0,0,0
  45               		.stabn	162,0,0,0
  46               		.stabs	"/usr/avr/include/avr/signal.h",130,0,0,0
  47               		.stabn	162,0,0,0
  48               		.stabn	162,0,0,0
  49               		.stabs	"../../include/asuro_defs.h",130,0,0,0
  50               		.stabn	162,0,0,0
  51               		.stabs	"AS_UserIsr:t(2,1)=(2,2)=*(2,3)=f(0,20)",128,0,37,0
  52               		.stabn	162,0,0,0
  53               	.global	AS_ir_data
  54               	.global	AS_ir_data
  55               		.section .bss
  56               		.type	AS_ir_data, @object
  57               		.size	AS_ir_data, 2
GAS LISTING /tmp/ccIcdeiG.s 			page 2


  58               	AS_ir_data:
  59 0000 0000      		.skip 2,0
  60               	.global	AS_ir_lastsample
  61               	.global	AS_ir_lastsample
  62               		.type	AS_ir_lastsample, @object
  63               		.size	AS_ir_lastsample, 1
  64               	AS_ir_lastsample:
  65 0002 00        		.skip 1,0
  66               	.global	AS_ir_bittimer
  67               	.global	AS_ir_bittimer
  68               		.type	AS_ir_bittimer, @object
  69               		.size	AS_ir_bittimer, 1
  70               	AS_ir_bittimer:
  71 0003 00        		.skip 1,0
  72               	.global	AS_ir_data_tmp
  73               	.global	AS_ir_data_tmp
  74               		.type	AS_ir_data_tmp, @object
  75               		.size	AS_ir_data_tmp, 2
  76               	AS_ir_data_tmp:
  77 0004 0000      		.skip 2,0
  78               	.global	AS_ir_bitcount
  79               	.global	AS_ir_bitcount
  80               		.type	AS_ir_bitcount, @object
  81               		.size	AS_ir_bitcount, 1
  82               	AS_ir_bitcount:
  83 0006 00        		.skip 1,0
  84               		.text
  85               		.stabs	"AS_isr_irrc5:F(0,20)",36,0,53,AS_isr_irrc5
  86               	.global	AS_isr_irrc5
  87               		.type	AS_isr_irrc5, @function
  88               	AS_isr_irrc5:
   1:asuro_avr_irrc5.c **** /** @file 
   2:asuro_avr_irrc5.c ****  * 
   3:asuro_avr_irrc5.c ****  * AVR implementation of IR-RC5 decoding. Based on the c't-Bot version created 
   4:asuro_avr_irrc5.c ****  * by Benjamin Benz (bbe@heise.de).
   5:asuro_avr_irrc5.c ****  * 
   6:asuro_avr_irrc5.c ****  * @author Denis Martin
   7:asuro_avr_irrc5.c ****  * 
   8:asuro_avr_irrc5.c ****  * This program is free software; you can redistribute it and/or modify it under
   9:asuro_avr_irrc5.c ****  * the terms of the GNU General Public License as published by the Free Software
  10:asuro_avr_irrc5.c ****  * Foundation; either version 2 of the License, or (at your option) any later
  11:asuro_avr_irrc5.c ****  * version.
  12:asuro_avr_irrc5.c ****  * This program is distributed in the hope that it will be useful, but WITHOUT
  13:asuro_avr_irrc5.c ****  * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  14:asuro_avr_irrc5.c ****  * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
  15:asuro_avr_irrc5.c ****  * details. You should have received a copy of the GNU General Public License
  16:asuro_avr_irrc5.c ****  * along with this program; if not, write to the Free Software Foundation, Inc.,
  17:asuro_avr_irrc5.c ****  * 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.
  18:asuro_avr_irrc5.c ****  */
  19:asuro_avr_irrc5.c **** 
  20:asuro_avr_irrc5.c **** #include "asuro.h"
  21:asuro_avr_irrc5.c **** 
  22:asuro_avr_irrc5.c **** #define AS_IR_SAMPLES_PER_BIT		8	///< 8 samples per bit
  23:asuro_avr_irrc5.c **** #define AS_IR_SAMPLES_PER_BIT_EARLY 6	///< edge not before the 6th sample
  24:asuro_avr_irrc5.c **** #define AS_IR_SAMPLES_PER_BIT_LATE 	10	///< edge after 10 samples at the latest
  25:asuro_avr_irrc5.c **** 
  26:asuro_avr_irrc5.c **** /** 
GAS LISTING /tmp/ccIcdeiG.s 			page 3


  27:asuro_avr_irrc5.c ****  * The start bit is only valid after 200 samples with unchanged edge. 
  28:asuro_avr_irrc5.c ****  * According to Benz, this should be 50x1.778ms, but since we have an 8-bit
  29:asuro_avr_irrc5.c ****  * counter for the samples, we are satisfied with about the half of it.
  30:asuro_avr_irrc5.c ****  */
  31:asuro_avr_irrc5.c **** #define AS_IR_PAUSE_SAMPLES			200 
  32:asuro_avr_irrc5.c **** 
  33:asuro_avr_irrc5.c **** #define AS_IR_PORT	PORTD	///< port D
  34:asuro_avr_irrc5.c **** #define AS_IR_DDR	DDRD	///< IO direction port D
  35:asuro_avr_irrc5.c **** #define AS_IR_PINR	PIND	///< input port D
  36:asuro_avr_irrc5.c **** #define AS_IR_PIN	PD0		///< IO pin on port D
  37:asuro_avr_irrc5.c **** 
  38:asuro_avr_irrc5.c **** volatile unsigned short	AS_ir_data = 0; ///< last completely read RC5 packet
  39:asuro_avr_irrc5.c **** 
  40:asuro_avr_irrc5.c **** /** @name private variables to the ISR */
  41:asuro_avr_irrc5.c **** //@{
  42:asuro_avr_irrc5.c **** char AS_ir_lastsample = 0; 			///< last read sample
  43:asuro_avr_irrc5.c **** unsigned char AS_ir_bittimer = 0;	///< call counter for AS_isr_irrc5()
  44:asuro_avr_irrc5.c **** unsigned short AS_ir_data_tmp = 0;	///< RC5 bit stream
  45:asuro_avr_irrc5.c **** char AS_ir_bitcount = 0;			///< number of read bits
  46:asuro_avr_irrc5.c **** //@}
  47:asuro_avr_irrc5.c **** 
  48:asuro_avr_irrc5.c **** /**
  49:asuro_avr_irrc5.c ****  * ISR for receiving IR-RC5 commands
  50:asuro_avr_irrc5.c ****  * 
  51:asuro_avr_irrc5.c ****  * called about every 222.2us
  52:asuro_avr_irrc5.c ****  */
  53:asuro_avr_irrc5.c **** void AS_isr_irrc5(void) {
  89               		.stabn 68,0,53,.LM1-AS_isr_irrc5
  90               	.LM1:
  91               	/* prologue: frame size=0 */
  92               	/* prologue end (size=0) */
  54:asuro_avr_irrc5.c **** 	// read a sample
  55:asuro_avr_irrc5.c **** 	char sample = 1;
  93               		.stabn 68,0,55,.LM2-AS_isr_irrc5
  94               	.LM2:
  95               	.LBB2:
  96 0000 51E0      		ldi r21,lo8(1)
  56:asuro_avr_irrc5.c **** 	if (AS_IRRX_SAMPLE) sample = 0;
  97               		.stabn 68,0,56,.LM3-AS_isr_irrc5
  98               	.LM3:
  99 0002 8099      		sbic 48-0x20,0
 100 0004 50E0      		ldi r21,lo8(0)
 101               	.L2:
  57:asuro_avr_irrc5.c **** 
  58:asuro_avr_irrc5.c **** 	// increase bittimer - the timer stops at 255
  59:asuro_avr_irrc5.c **** 	if (AS_ir_bittimer < 255) AS_ir_bittimer++;
 102               		.stabn 68,0,59,.LM4-AS_isr_irrc5
 103               	.LM4:
 104 0006 8091 0000 		lds r24,AS_ir_bittimer
 105 000a 8F3F      		cpi r24,lo8(-1)
 106 000c 19F0      		breq .L3
 107 000e 8F5F      		subi r24,lo8(-(1))
 108 0010 8093 0000 		sts AS_ir_bittimer,r24
 109               	.L3:
  60:asuro_avr_irrc5.c **** 
  61:asuro_avr_irrc5.c **** 	if (AS_ir_lastsample != sample) {
 110               		.stabn 68,0,61,.LM5-AS_isr_irrc5
GAS LISTING /tmp/ccIcdeiG.s 			page 4


 111               	.LM5:
 112 0014 8091 0000 		lds r24,AS_ir_lastsample
 113 0018 8517      		cp r24,r21
 114 001a 79F1      		breq .L4
  62:asuro_avr_irrc5.c **** 		// edge detected
  63:asuro_avr_irrc5.c **** 		// start bit?
  64:asuro_avr_irrc5.c **** 		if (AS_ir_bitcount == 0) {
 115               		.stabn 68,0,64,.LM6-AS_isr_irrc5
 116               	.LM6:
 117 001c 4091 0000 		lds r20,AS_ir_bitcount
 118 0020 4423      		tst r20
 119 0022 71F4      		brne .L5
  65:asuro_avr_irrc5.c **** 			if (sample && (AS_ir_bittimer > AS_IR_PAUSE_SAMPLES) ) {
 120               		.stabn 68,0,65,.LM7-AS_isr_irrc5
 121               	.LM7:
 122 0024 5523      		tst r21
 123 0026 39F0      		breq .L6
 124 0028 8091 0000 		lds r24,AS_ir_bittimer
 125 002c 893C      		cpi r24,lo8(-55)
 126 002e 18F0      		brlo .L6
  66:asuro_avr_irrc5.c **** 				// save start bit
  67:asuro_avr_irrc5.c **** 				AS_ir_data_tmp = 1;
 127               		.stabn 68,0,67,.LM8-AS_isr_irrc5
 128               	.LM8:
 129 0030 81E0      		ldi r24,lo8(1)
 130 0032 90E0      		ldi r25,hi8(1)
 131 0034 15C0      		rjmp .L15
 132               	.L6:
  68:asuro_avr_irrc5.c **** 				AS_ir_bitcount++;
  69:asuro_avr_irrc5.c **** 
  70:asuro_avr_irrc5.c **** 			} else {
  71:asuro_avr_irrc5.c **** 				// error
  72:asuro_avr_irrc5.c **** 				AS_ir_data_tmp = 0;
 133               		.stabn 68,0,72,.LM9-AS_isr_irrc5
 134               	.LM9:
 135 0036 1092 0000 		sts (AS_ir_data_tmp)+1,__zero_reg__
 136 003a 1092 0000 		sts AS_ir_data_tmp,__zero_reg__
 137 003e 1AC0      		rjmp .L11
 138               	.L5:
  73:asuro_avr_irrc5.c **** 
  74:asuro_avr_irrc5.c **** 			}
  75:asuro_avr_irrc5.c **** 
  76:asuro_avr_irrc5.c **** 			// bittimer reset
  77:asuro_avr_irrc5.c **** 			AS_ir_bittimer = 0;
  78:asuro_avr_irrc5.c **** 			
  79:asuro_avr_irrc5.c **** 		// bits 2..14: only consider edges within bits
  80:asuro_avr_irrc5.c **** 		} else {
  81:asuro_avr_irrc5.c **** 			if (AS_ir_bittimer >= AS_IR_SAMPLES_PER_BIT_EARLY) {
 139               		.stabn 68,0,81,.LM10-AS_isr_irrc5
 140               	.LM10:
 141 0040 8091 0000 		lds r24,AS_ir_bittimer
 142 0044 8630      		cpi r24,lo8(6)
 143 0046 58F1      		brlo .L12
  82:asuro_avr_irrc5.c **** 				if (AS_ir_bittimer <= AS_IR_SAMPLES_PER_BIT_LATE){
 144               		.stabn 68,0,82,.LM11-AS_isr_irrc5
 145               	.LM11:
 146 0048 8B30      		cpi r24,lo8(11)
GAS LISTING /tmp/ccIcdeiG.s 			page 5


 147 004a 90F4      		brsh .L10
  83:asuro_avr_irrc5.c **** 					// save bit
  84:asuro_avr_irrc5.c **** 					AS_ir_data_tmp = (AS_ir_data_tmp << 1) | sample;
 148               		.stabn 68,0,84,.LM12-AS_isr_irrc5
 149               	.LM12:
 150 004c 8091 0000 		lds r24,AS_ir_data_tmp
 151 0050 9091 0000 		lds r25,(AS_ir_data_tmp)+1
 152 0054 880F      		lsl r24
 153 0056 991F      		rol r25
 154 0058 252F      		mov r18,r21
 155 005a 3327      		clr r19
 156 005c 822B      		or r24,r18
 157 005e 932B      		or r25,r19
 158               	.L15:
 159 0060 9093 0000 		sts (AS_ir_data_tmp)+1,r25
 160 0064 8093 0000 		sts AS_ir_data_tmp,r24
  85:asuro_avr_irrc5.c **** 					AS_ir_bitcount++;
 161               		.stabn 68,0,85,.LM13-AS_isr_irrc5
 162               	.LM13:
 163 0068 4F5F      		subi r20,lo8(-(1))
 164 006a 4093 0000 		sts AS_ir_bitcount,r20
 165 006e 02C0      		rjmp .L11
 166               	.L10:
  86:asuro_avr_irrc5.c **** 
  87:asuro_avr_irrc5.c **** 				} else {
  88:asuro_avr_irrc5.c **** 					// too late, trop packet
  89:asuro_avr_irrc5.c **** 					AS_ir_bitcount = 0;
 167               		.stabn 68,0,89,.LM14-AS_isr_irrc5
 168               	.LM14:
 169 0070 1092 0000 		sts AS_ir_bitcount,__zero_reg__
 170               	.L11:
  90:asuro_avr_irrc5.c **** 
  91:asuro_avr_irrc5.c **** 				}
  92:asuro_avr_irrc5.c **** 				
  93:asuro_avr_irrc5.c **** 				// bittimer-reset
  94:asuro_avr_irrc5.c **** 				AS_ir_bittimer = 0;
 171               		.stabn 68,0,94,.LM15-AS_isr_irrc5
 172               	.LM15:
 173 0074 1092 0000 		sts AS_ir_bittimer,__zero_reg__
 174 0078 12C0      		rjmp .L12
 175               	.L4:
  95:asuro_avr_irrc5.c **** 			}
  96:asuro_avr_irrc5.c **** 		}
  97:asuro_avr_irrc5.c **** 		
  98:asuro_avr_irrc5.c **** 	} else {
  99:asuro_avr_irrc5.c **** 		// no edge within bit time?
 100:asuro_avr_irrc5.c **** 		if (AS_ir_bittimer > AS_IR_SAMPLES_PER_BIT_LATE) {
 176               		.stabn 68,0,100,.LM16-AS_isr_irrc5
 177               	.LM16:
 178 007a 8091 0000 		lds r24,AS_ir_bittimer
 179 007e 8B30      		cpi r24,lo8(11)
 180 0080 70F0      		brlo .L12
 101:asuro_avr_irrc5.c **** 			// 14 bits read?
 102:asuro_avr_irrc5.c **** 			if (AS_ir_bitcount == 14) {
 181               		.stabn 68,0,102,.LM17-AS_isr_irrc5
 182               	.LM17:
 183 0082 8091 0000 		lds r24,AS_ir_bitcount
GAS LISTING /tmp/ccIcdeiG.s 			page 6


 184 0086 8E30      		cpi r24,lo8(14)
 185 0088 41F4      		brne .L14
 103:asuro_avr_irrc5.c **** 				AS_ir_data = AS_ir_data_tmp;
 186               		.stabn 68,0,103,.LM18-AS_isr_irrc5
 187               	.LM18:
 188 008a 8091 0000 		lds r24,AS_ir_data_tmp
 189 008e 9091 0000 		lds r25,(AS_ir_data_tmp)+1
 190 0092 9093 0000 		sts (AS_ir_data)+1,r25
 191 0096 8093 0000 		sts AS_ir_data,r24
 192               	.L14:
 104:asuro_avr_irrc5.c **** 			}
 105:asuro_avr_irrc5.c **** 			
 106:asuro_avr_irrc5.c **** 			// drop packet
 107:asuro_avr_irrc5.c **** 			AS_ir_bitcount = 0;
 193               		.stabn 68,0,107,.LM19-AS_isr_irrc5
 194               	.LM19:
 195 009a 1092 0000 		sts AS_ir_bitcount,__zero_reg__
 196               	.L12:
 108:asuro_avr_irrc5.c **** 		}
 109:asuro_avr_irrc5.c **** 	}
 110:asuro_avr_irrc5.c **** 	
 111:asuro_avr_irrc5.c **** 	// save sample in sample buffer
 112:asuro_avr_irrc5.c **** 	AS_ir_lastsample = sample;
 197               		.stabn 68,0,112,.LM20-AS_isr_irrc5
 198               	.LM20:
 199 009e 5093 0000 		sts AS_ir_lastsample,r21
 113:asuro_avr_irrc5.c **** }
 200               		.stabn 68,0,113,.LM21-AS_isr_irrc5
 201               	.LM21:
 202               	.LBE2:
 203               	/* epilogue: frame size=0 */
 204 00a2 0895      		ret
 205               	/* epilogue end (size=1) */
 206               	/* function AS_isr_irrc5 size 83 (82) */
 207               		.size	AS_isr_irrc5, .-AS_isr_irrc5
 208               		.stabs	"sample:r(0,2)",64,0,55,21
 209               		.stabn	192,0,0,.LBB2-AS_isr_irrc5
 210               		.stabn	224,0,0,.LBE2-AS_isr_irrc5
 211               	.Lscope0:
 212               		.stabs	"",36,0,0,.Lscope0-AS_isr_irrc5
 213               		.stabs	"AS_Irrc5Read:F(0,9)",36,0,121,AS_Irrc5Read
 214               	.global	AS_Irrc5Read
 215               		.type	AS_Irrc5Read, @function
 216               	AS_Irrc5Read:
 114:asuro_avr_irrc5.c **** 
 115:asuro_avr_irrc5.c **** /**
 116:asuro_avr_irrc5.c ****  * Read the last IR-RC5 code received. This will flush the input, thus
 117:asuro_avr_irrc5.c ****  * subsequent calls will return 0 or a new value.
 118:asuro_avr_irrc5.c ****  * 
 119:asuro_avr_irrc5.c ****  * @return Last IR RC5 code received
 120:asuro_avr_irrc5.c ****  */
 121:asuro_avr_irrc5.c **** inline unsigned short AS_Irrc5Read(void) {
 217               		.stabn 68,0,121,.LM22-AS_Irrc5Read
 218               	.LM22:
 219               	/* prologue: frame size=0 */
 220               	/* prologue end (size=0) */
 122:asuro_avr_irrc5.c **** 	unsigned short rv = AS_ir_data;
GAS LISTING /tmp/ccIcdeiG.s 			page 7


 221               		.stabn 68,0,122,.LM23-AS_Irrc5Read
 222               	.LM23:
 223               	.LBB3:
 224 00a4 8091 0000 		lds r24,AS_ir_data
 225 00a8 9091 0000 		lds r25,(AS_ir_data)+1
 123:asuro_avr_irrc5.c **** 	AS_ir_data = 0;
 226               		.stabn 68,0,123,.LM24-AS_Irrc5Read
 227               	.LM24:
 228 00ac 1092 0000 		sts (AS_ir_data)+1,__zero_reg__
 229 00b0 1092 0000 		sts AS_ir_data,__zero_reg__
 124:asuro_avr_irrc5.c **** 	return rv;
 125:asuro_avr_irrc5.c **** }
 230               		.stabn 68,0,125,.LM25-AS_Irrc5Read
 231               	.LM25:
 232               	.LBE3:
 233               	/* epilogue: frame size=0 */
 234 00b4 0895      		ret
 235               	/* epilogue end (size=1) */
 236               	/* function AS_Irrc5Read size 9 (8) */
 237               		.size	AS_Irrc5Read, .-AS_Irrc5Read
 238               		.stabs	"rv:r(0,9)",64,0,122,24
 239               		.stabn	192,0,0,.LBB3-AS_Irrc5Read
 240               		.stabn	224,0,0,.LBE3-AS_Irrc5Read
 241               	.Lscope1:
 242               		.stabs	"",36,0,0,.Lscope1-AS_Irrc5Read
 243               		.stabs	"AS_ir_data:G(1,1)=B(0,9)",32,0,38,0
 244               		.stabs	"AS_ir_lastsample:G(0,2)",32,0,42,0
 245               		.stabs	"AS_ir_bittimer:G(0,11)",32,0,43,0
 246               		.stabs	"AS_ir_data_tmp:G(0,9)",32,0,44,0
 247               		.stabs	"AS_ir_bitcount:G(0,2)",32,0,45,0
 248               		.text
 249               		.stabs "",100,0,0,Letext
 250               	Letext:
 251               	/* File "asuro_avr_irrc5.c": code   92 = 0x005c (  90), prologues   0, epilogues   2 */
GAS LISTING /tmp/ccIcdeiG.s 			page 8


DEFINED SYMBOLS
                            *ABS*:00000000 asuro_avr_irrc5.c
                            *ABS*:0000003f __SREG__
                            *ABS*:0000003e __SP_H__
                            *ABS*:0000003d __SP_L__
                            *ABS*:00000000 __tmp_reg__
                            *ABS*:00000001 __zero_reg__
     /tmp/ccIcdeiG.s:58     .bss:00000000 AS_ir_data
     /tmp/ccIcdeiG.s:64     .bss:00000002 AS_ir_lastsample
     /tmp/ccIcdeiG.s:70     .bss:00000003 AS_ir_bittimer
     /tmp/ccIcdeiG.s:76     .bss:00000004 AS_ir_data_tmp
     /tmp/ccIcdeiG.s:82     .bss:00000006 AS_ir_bitcount
     /tmp/ccIcdeiG.s:88     .text:00000000 AS_isr_irrc5
     /tmp/ccIcdeiG.s:216    .text:000000a4 AS_Irrc5Read
     /tmp/ccIcdeiG.s:250    .text:000000b6 Letext

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
